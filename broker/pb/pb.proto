syntax = "proto3";
import "github.com/vx-labs/mqtt-broker/topics/types.proto";
import "github.com/vx-labs/mqtt-protocol/packet/pb.proto";


message SubscriptionFilter {}
message CloseSessionInput {
  string ID = 1;
}
message CloseSessionOutput {
  string ID = 1;
}

message MessagePublished {
  string Tenant = 1;
  packet.Publish publish = 2;
}

message TransportMetadata {
  string Name = 1;
  bool Encrypted = 2;
  string RemoteAddress = 3;
  string Endpoint = 4;
}
message ConnectInput {
  TransportMetadata TransportMetadata = 1;
  packet.Connect Connect = 2;
}
message ConnectOutput {
  string ID = 1;
  string Token = 3;
  packet.ConnAck ConnAck = 2;
}
message DisconnectInput {
  string ID = 1;
  packet.Disconnect Disconnect = 2;
}
message DisconnectOutput {}
message PublishInput {
  string ID = 1;
  packet.Publish Publish = 2;
}
message PublishOutput {
  packet.PubAck PubAck = 1;
}
message SubscribeInput {
  string ID = 1;
  packet.Subscribe Subscribe = 2;
}
message SubscribeOutput {
  packet.SubAck SubAck = 1;
}
message UnsubscribeInput {
  string ID = 1;
  packet.Unsubscribe Unsubscribe = 2;
}
message UnsubscribeOutput {
  packet.UnsubAck UnsubAck = 1;
}

message PingReqInput {
  string ID = 1;
  packet.PingReq PingReq = 2;
}
message PingReqOutput {
  packet.PingResp PingResp = 1;
}

service BrokerService {
    rpc Connect(ConnectInput) returns (ConnectOutput);
    rpc Disconnect(DisconnectInput) returns (DisconnectOutput);
    rpc Publish(PublishInput) returns (PublishOutput);
    rpc Subscribe(SubscribeInput) returns (SubscribeOutput);
    rpc Unsubscribe(UnsubscribeInput) returns (UnsubscribeOutput);
    rpc PingReq(PingReqInput) returns (PingReqOutput);
    rpc CloseSession(CloseSessionInput) returns (CloseSessionOutput);
}